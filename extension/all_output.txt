Sure, here is a simple implementation of a Chrome extension that hides tweets from blacklisted users. 

manifest.json
```
{
  "manifest_version": 2,
  "name": "Twitter Blacklist",
  "version": "1.0",
  "permissions": ["https://twitter.com/*"],
  "content_scripts": [
    {
      "matches": ["https://twitter.com/*"],
      "js": ["content.js"]
    }
  ]
}
```

content.js
```
// Load the blacklist
var blacklist = [];
fetch(chrome.extension.getURL('/blacklist.txt'))
    .then(response => response.text())
    .then(data => {
        // The data is the content of the file
        blacklist = data.split('\n');
    });

// Function to hide tweets from blacklisted users
function hideBlacklistedTweets() {
    // Get all tweet elements
    var tweets = document.querySelectorAll('[data-testid="tweet"]');
    for (var i = 0; i < tweets.length; i++) {
        var tweet = tweets[i];
        // Get the username of the tweet's author
        var username = tweet.querySelector('[dir="ltr"]').textContent;
        // If the username is in the blacklist, hide the tweet
        if (blacklist.includes(username)) {
            tweet.style.display = 'none';
        }
    }
}

// Run the function every second to hide new tweets
setInterval(hideBlacklistedTweets, 1000);
```

blacklist.txt
```
@blacklistedUser1
@blacklistedUser2
@blacklistedUser3
```

This extension will hide all tweets from the users listed in the `blacklist.txt` file. The blacklist is loaded when the extension is loaded, and the `hideBlacklistedTweets` function is run every second to hide new tweets from blacklisted users. 

Please note that this is a very basic implementation and may not work perfectly in all cases. For example, it does not handle cases where tweets are loaded dynamically as the user scrolls down the page. A more robust solution would likely require using the MutationObserver API to detect when new tweets are added to the page.